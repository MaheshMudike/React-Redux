{"version":3,"sources":["logo.svg","counteractions.js","counterdisplay.js","redux_todos.js","todosAdd.js","todoShow.js","redux_users.js","users.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CounterAction","decrementCount","props","decrement","incrementCount","increment","state","disabled","newProps","this","setState","Fragment","onClick","Component","CounterDisplay","connect","dispatch","type","counter","console","log","count","createStore","action","todo","filter","currentTodo","TodosAdd","onTodoChange","e","target","value","addTodo","name","onChange","mapDispatchProps","TodoShow","remove","removeTodo","todos","map","index","key","mapDispatchToProps","intialObject","users","loading","error","store","applyMiddleware","thunk","Users","getUsers","user","id","mapDispatchtToProps","fetch","then","response","json","getusersSuccess","catch","err","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d195376a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n//import {store, increment ,decrement} from './redux_counter'\r\nimport { connect } from 'react-redux'\r\nclass CounterAction extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            disabled: true\r\n        }\r\n\r\n        // store.subscribe(()=>{\r\n        //    var state = store.getState()\r\n        //     this.setState({\r\n        //         //counter value is optional if we need we can take \r\n        //          counter : state.count,\r\n        //         disabled : state.disabled\r\n        //     })\r\n        // })\r\n    }\r\n    componentWillReceiveProps(newProps){\r\n    this.setState({\r\n        disabled : newProps.disabled\r\n    })\r\n    }\r\n    decrementCount = () => {\r\n        //store.dispatch(decrement())\r\n        this.props.decrement()\r\n    }\r\n    incrementCount = () => {\r\n        this.props.increment()\r\n        // store.dispatch(increment())\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Counterr Action</h1>\r\n                <button onClick={this.incrementCount}>Increment</button>&nbsp;&nbsp;\r\n                <button onClick={this.decrementCount} disabled={this.state.disabled}>Decrement</button>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nvar mapStateprops = (state) => {\r\n    return {\r\n        disabled: state.disabled,\r\n        //    loading : state.loading,\r\n        //    error : state.error\r\n    }\r\n}\r\nvar mapDispatchtoprops=(dispatch) => {\r\n    return {\r\n        increment:() =>{\r\n\r\n           dispatch({type: 'INCREMENT'})\r\n        },\r\n        decrement:()=>{\r\n            dispatch({ type: 'DECREMENT' })\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateprops,mapDispatchtoprops)(CounterAction);","import React,{Component}  from 'react'\r\n//import {store} from './redux_counter'\r\nimport {connect} from 'react-redux'\r\nclass CounterDisplay extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            counter : 0,\r\n        \r\n        }\r\n        // store.subscribe(()=>{\r\n        //     // var state = \r\n        //     this.setState({\r\n        //         counter : store.getState().count\r\n        //     })\r\n        // })\r\n    }\r\n    componentWillReceiveProps(newProps){\r\n        console.log(newProps)\r\n        this.setState({\r\n            counter : newProps.counter\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <h1>Counterr Dispaly</h1>\r\n            <h3>{this.state.counter}</h3>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nvar mapStateprops = (state)=>{\r\n    console.log(state)\r\n    return {\r\n       counter : state.count,\r\n    // //    loading : state.loading,\r\n    // //    error : state.error\r\n     }\r\n}\r\n\r\nexport default  connect(mapStateprops)(CounterDisplay);","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk' \r\n\r\n\r\n// Tods Example Store ....\r\n\r\n//Actions & Action Createros \r\n\r\nconst ADD_TODO = 'ADD_TODO'\r\nconst REMOVE_TODO = 'REMOVE_TODO'\r\n\r\n//Action Creator \r\n\r\nexport function addTodo(todo) {\r\n    return {\r\n        type: ADD_TODO,\r\n        todo\r\n    }\r\n}\r\n\r\nexport function removeTodo(todo) {\r\n    return {\r\n        type: REMOVE_TODO,\r\n        todo\r\n    }\r\n}\r\n\r\n\r\n//reducrs \r\n\r\nconst todos = (state = [], action) => {\r\n      console.log(action)\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            return [\r\n                ...state,\r\n                 action.todo\r\n            ]\r\n\r\n        case REMOVE_TODO:\r\n            return  state.filter((currentTodo)=>{\r\n                 return currentTodo != action.todo\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//store \r\n\r\nexport const store=createStore(todos);","import React,{Component}  from 'react'\r\nimport {addTodo} from './redux_todos'\r\nimport {connect} from 'react-redux'\r\nclass TodosAdd extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            todo : ''\r\n        \r\n        }\r\n        // store.subscribe(()=>{\r\n        //     // var state = \r\n        //     this.setState({\r\n        //         counter : store.getState().count\r\n        //     })\r\n        // })\r\n    }\r\n    onTodoChange =(e)=>{\r\n    this.setState({\r\n        todo : e.target.value\r\n    })\r\n    }\r\n    addTodo = ()=>{\r\n     //Send Acition \r\n       \r\n    //    store.dispatch({\r\n    //        type : \"ADD_TODO\", todo : this.state.todo\r\n    //    })\r\n\r\n     /// or //\r\n\r\n    //  store.dispatch(addTodo(this.state.todo));\r\n    //  this.setState({\r\n    //      todo : ''\r\n    //  })\r\n    this.props.addTodo(this.state.todo)\r\n        this.setState({\r\n         todo : ''\r\n     })\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <h1>TodosAdd</h1>\r\n            <div>\r\n               <input type=\"text\" name=\"todo\" value = {this.state.todo} onChange={this.onTodoChange}/>\r\n               <button onClick = {this.addTodo}>Add Todo</button>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nvar mapDispatchProps={\r\n    addTodo\r\n\r\n}\r\nexport default connect(null,mapDispatchProps)(TodosAdd);","import React,{Component}  from 'react'\r\nimport { removeTodo} from './redux_todos'\r\nimport {connect} from 'react-redux'\r\nclass TodoShow extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n           todos : []\r\n        \r\n        }\r\n        // store.subscribe(()=>{\r\n        //     // var state = \r\n        //     // this.setState({\r\n        //     //     todos : store.getState()\r\n        //     // })\r\n        // })\r\n    }\r\n    componentWillReceiveProps(newProps){\r\n        this.setState({\r\n            todos : newProps.todos\r\n        })\r\n    }\r\n    remove = (todo)=>{\r\n       // store.dispatch(removeTodo(todo));\r\n       this.props.removeTodo(todo)\r\n        this.setState({\r\n            todo : ''\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <h1>Todos Dispaly</h1>\r\n             <ul>\r\n                 {\r\n                     this.state.todos.map((todo,index)=>{\r\n                         return <li key={index}>{todo} \r\n                         &nbsp;&nbsp;<button onClick = {()=>{\r\n                             this.remove(todo)\r\n                         }}>Remove</button></li>\r\n                     })\r\n                 }\r\n             </ul>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nvar mapStateToProp = (state)=>{\r\n    console.log(state)\r\n    return {\r\n      todos : state\r\n    }\r\n}\r\nvar mapDispatchToProps = {\r\n   removeTodo\r\n}\r\nexport default  connect (mapStateToProp, mapDispatchToProps)(TodoShow)","\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk' \r\n\r\n//// User Api calling Using Middle Ware \r\n\r\n      //Actions  & creatords \r\n\r\n      const GETUSERS_STARTED = 'GETUSERS_STARTED'\r\n      const GETUSERS_SUCCESS = 'GETUSERS_SUCCESS'\r\n      const GETUSERS_FAILED = 'GETUSERS_FAILED'\r\n\r\n\r\n        export function getusersStarted(){\r\n         return  {\r\n           type : GETUSERS_STARTED\r\n         }\r\n        }\r\n        export function getusersSuccess(users){\r\n          return {\r\n            type : GETUSERS_SUCCESS,\r\n            users\r\n          }\r\n       }\r\n       export function getusersFailed(error){\r\n          return {\r\n            type : GETUSERS_FAILED,\r\n            error\r\n          }\r\n       }\r\n\r\n   // thumnk\r\n\r\n   export function getUsers () {\r\n     return function (dispatch){\r\n       dispatch(getusersStarted())\r\n       fetch('https://jsonplaceholder.typicode.com/users')\r\n       .then(response=> response.json())\r\n       .then(users=>{\r\n         dispatch(getusersSuccess(users))\r\n       })\r\n       .catch((err)=>{\r\n         dispatch(getusersFailed())\r\n       })\r\n     }\r\n   }\r\n\r\n   // Reducers \r\n  let intialObject = {\r\n    users : [],\r\n    loading : false,\r\n    error : false\r\n  }\r\n\r\n   var users = (state = intialObject, action)=>{\r\n\r\n     switch (action.type){\r\n       case GETUSERS_STARTED:\r\n         return {\r\n           users  : [],\r\n           loading : true,\r\n           error : false\r\n         }\r\n         case GETUSERS_SUCCESS : \r\n         return {\r\n           users  : action.users,\r\n           loading : false,\r\n           error : false\r\n         }\r\n         case GETUSERS_FAILED : \r\n          return {\r\n           users  : [],\r\n           loading : false,\r\n           error : true\r\n          }\r\n        default :\r\n           return state \r\n     }\r\n\r\n   }\r\n\r\n   // store using middle ware and fetch api data \r\n\r\n    export const store = createStore(users,applyMiddleware(thunk));","import React , {Component}  from 'react'\r\nimport { getUsers } from './redux_users';\r\nimport { connect } from 'react-redux'\r\n\r\nclass Users extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            users : [],\r\n            loading : false,\r\n            error : false\r\n        }\r\n    //     store.subscribe(()=>{\r\n    //         var state = store.getState();\r\n    //         this.setState({\r\n    //             users : state.users,\r\n    //             loading : state.loading,\r\n    //             error : state.error\r\n    //         })\r\n    //     })\r\n     }\r\n    componentWillReceiveProps(newProps){\r\n        this.setState({\r\n                        users : newProps.users,\r\n                        loading : newProps.loading,\r\n                        error : newProps.error\r\n                    })\r\n    }\r\n    componentDidMount(){\r\n       // store.dispatch(getUsers());\r\n       this.props.getUsers()\r\n    }\r\n    render(){\r\n        if(this.state.loading === true){\r\n            return (\r\n                <div>\r\n                    <h1>Users</h1>\r\n                    <p>Loading... Please wait</p>\r\n                </div>\r\n            )\r\n        }\r\n        if(this.state.error === true){\r\n            return (\r\n                <div>\r\n                    <h1>Users</h1>\r\n                    <p>Something went wrong... Please try again</p>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n            <h1>Users</h1>\r\n            <ul>\r\n                {\r\n                    this.state.users.map((user)=>{\r\n                        return <li key ={user.id}>{user.name}</li>\r\n                    })\r\n                }\r\n            </ul>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n \r\nvar mapDispatchtToProps = {\r\n    getUsers\r\n\r\n}\r\n\r\n var mapStateprops = (state)=>{\r\n     return {\r\n        users : state.users,\r\n        loading : state.loading,\r\n        error : state.error\r\n     }\r\n }\r\n \r\n \r\nexport default connect(mapStateprops ,mapDispatchtToProps)(Users);\r\n\r\n//export default Users","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CounterAction from './counteractions';\nimport CounterDisplay from './counterdisplay';\nimport TodosAdd from './todosAdd';\nimport TodoShow from './todoShow';\nimport BankBalance from './bankBalance';\nimport BankOperation from './bankOperations';\nimport Users from './users';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Redux Header\n      </header>\n      {/* <CounterDisplay/>\n      <CounterAction/> */}\n      {/* <TodosAdd/>\n      <TodoShow/> */}\n      {/* <BankBalance/>\n      <BankOperation/> */}\n      <Users/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\n// import {store}  from './redux_todos'\nimport {store}  from './redux_users'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}